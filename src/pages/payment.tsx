import Head from "next/head";
import Image from "next/image";
import { Connection, clusterApiUrl, PublicKey, Keypair } from "@solana/web3.js";
import { useRef } from "react";
import { findReference, FindReferenceError } from "@solana/pay";
import { useConnection } from "@solana/wallet-adapter-react";
import axios from 'axios';
import { useState,useEffect } from "react";
import BigNumber from 'bignumber.js';
import Link from 'next/link';
import { TransferRequestQR } from "../components/TransferRequestQR";
import { useMemo } from "react";




export default function Payment() {
  // const [qrCode, setQrCode] = useState<string>();
  const [connected, setConnected] = useState(false); // State for connection status
  const [walletAddress, setWalletAddress] = useState(null);
  const [amount, setAmount] = useState<BigNumber>()
  const [verificationStatus, setVerificationStatus] = useState(false);
  const [error, setError] = useState("");
  const [amountToString, setAmountToString] = useState("");
  const [solanaPriceUSD, setSolanaPriceUSD] = useState(null);
  const usdToSolanaRate = solanaPriceUSD !== null ? 1 / solanaPriceUSD : null;
  const { connection } = useConnection();
  const reference = useMemo(() => Keypair.generate().publicKey, []);

  const [isQRVisible, setIsQRVisible] = useState(false);

  // Function to handle the button click and show the QR component
  const handleShowQRClick = () => {
    setIsQRVisible(true);
  };
 

  const connectWallet = async () => {
    const network = "https://api.devnet.solana.com";
    const connection = new Connection(network, "confirmed");

    // Check if Phantom wallet is installed
    if ((window as any).solana && (window as any).solana.isPhantom) {
      try {
        // Connect to Phantom wallet
        await (window as any).solana.connect();
        const publicKey = await (window as any).solana.publicKey;

        // Update the state to reflect the connection
        setConnected(true);
        setWalletAddress(publicKey.toBase58());
      } catch (error) {
        console.error("Error connecting to Phantom wallet:", error);
      }
    } else {
      console.error("Phantom wallet extension not found. Please install it.");
    }
  };

  const disconnectWallet = async () => {
    if (connected) {
      try {
        await (window as any).solana.disconnect();
        setConnected(false);
        setWalletAddress(null);
      } catch (error) {
        console.error("Error disconnecting from Phantom wallet:", error);
      }
    }
  };

  const truncateAddress = (
    address: string | null,
    startLength = 5,
    endLength = 5
  ) => {
    if (!address) return "";
    return address.slice(0, startLength) + "..." + address.slice(-endLength);
  };

  const handleShareViaEmail = () => {
    if (isQRVisible) {
      const emailSubject = "Check out this QR code";
      const emailBody = "Please Scan the attached QR code to make Payment:";
      const emailLink = `mailto:?subject=${encodeURIComponent(
        emailSubject
      )}&body=${encodeURIComponent(emailBody)}&attachment=${encodeURIComponent(
        isQRVisible
      )}`;

      window.location.href = emailLink;
    } else {
      // Handle the case where qrCodeUrl is not available
      alert("QR code URL is missing.");
    }
  };
  const handleShareToWhatsApp = () => {
    if (isQRVisible) {
      const whatsappShareUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(
        "Check out this QR code: "
      )}${encodeURIComponent(isQRVisible)}`;
      window.open(whatsappShareUrl, "_blank");
    } else {
      // Handle the case where qrCodeUrl is not available
      alert("QR code URL is missing.");
    }
  };
  const goBack = () =>{
    setIsQRVisible(false)
  }

  function truncate(number:any , places:any) {
    return Math.trunc(number * 10 ** places) / 10 ** places;
  }
const mostRecentNotifiedTransaction = useRef<string  >();


  const checkTransaction = async () => {
    try {
      
      const signatureInfo = await findReference(connection, reference, { until: mostRecentNotifiedTransaction.current });

      console.log('Transaction confirmed', signatureInfo);
      setVerificationStatus(true);

      mostRecentNotifiedTransaction.current = signatureInfo.signature;
    } catch (e) {
      if (e instanceof FindReferenceError) {
        // No transaction found yet, ignore this error
        return;
      }
      console.error('Unknown error', e);
    }
  };

  useEffect(() => {

    connectWallet()
    const apiUrl =
      'https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd';

    // Fetch Solana's price
    axios.get(apiUrl).then((response) => {
      const price = response.data.solana.usd;
      setSolanaPriceUSD(price);
    });

    const interval = setInterval(checkTransaction, 500);

    return () => {
      clearInterval(interval);
    };



 
  }, [])
 

  

  return (
    <>
      <Head>
        <title>Solana.Finance</title>
        <meta name="description" content="Nobi.finance" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="shortcut icon" href="/favicon.ico" />
      </Head>
      <header className="header shadow-lg">
        <div className="image">
          <Image
            src="/logosol.png" // Path to the image in the public directory
            alt="My Image"
            width="30"
            height="0"
            className=""
          />
          <span className="hea"><Link href="/">Solana.Finance</Link></span>
        </div>
        <div className="line">
          {/* <p className=" hea in">Dashboard</p> */}
           {connected ? (
          <div>
            <button className="discon butt" onClick={disconnectWallet}>
              Disconnect Wallet <span>{truncateAddress(walletAddress)}</span>
            </button>
          </div>
        ) : (
          <div>
            <button className="discon" onClick={connectWallet}>
              Connect Wallet
            </button>
          </div>
        )}

        </div>
       
      </header>
      <main className=" main">
        <div className="z-10 w-full max-w-5xl items-center justify-between font-mono text-sm lg:flex">
        
       {isQRVisible && <p className="bac" onClick={goBack}> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
<path d="M14.9998 19.9201L8.47984 13.4001C7.70984 12.6301 7.70984 11.3701 8.47984 10.6001L14.9998 4.08008" stroke="#292D32" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
</svg><p>Go Back</p></p>}
       
          <h1 className="text text-5xl md:pl-12 font-bold text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4 scan">
            
            {isQRVisible ? "Scan this To pay" : "Input Amount"}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              viewBox="0 0 16 16"
              fill="none"
            >
              <path
                d="M7.99967 14.6666C11.6663 14.6666 14.6663 11.6666 14.6663 7.99992C14.6663 4.33325 11.6663 1.33325 7.99967 1.33325C4.33301 1.33325 1.33301 4.33325 1.33301 7.99992C1.33301 11.6666 4.33301 14.6666 7.99967 14.6666Z"
                stroke="#98A2B3"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M8 5.33325V8.66659"
                stroke="#98A2B3"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M7.99609 10.6667H8.00208"
                stroke="#98A2B3"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </h1>
        </div>
        {/* <SendTransferRequest reference={reference} /> */}
          {/* QR code for a transfer request */}
         
         <div className="xl">
         {isQRVisible && <TransferRequestQR reference={reference} amount={amount} walletAddress={walletAddress}/>}

         </div>
     
        
        
        {verificationStatus && <div className="confirm">
          
        <svg xmlns="http://www.w3.org/2000/svg" width="201" height="201" viewBox="0 0 201 201" fill="none">
<g clip-path="url(#clip0_2596_11221)">
<path d="M101.481 37.6948C88.2957 37.6948 75.4064 41.6048 64.4431 48.9302C53.4799 56.2556 44.935 66.6675 39.8892 78.8493C34.8433 91.031 33.5231 104.435 36.0955 117.368C38.6678 130.3 45.0172 142.178 54.3407 151.502C63.6642 160.825 75.5431 167.175 88.4751 169.747C101.407 172.32 114.812 170.999 126.993 165.953C139.175 160.908 149.587 152.363 156.912 141.4C164.238 130.436 168.148 117.547 168.148 104.361C168.128 86.6865 161.098 69.7411 148.6 57.243C136.102 44.7448 119.156 37.7147 101.481 37.6948ZM101.481 166.266C89.2375 166.266 77.2689 162.636 67.0887 155.833C56.9085 149.031 48.974 139.363 44.2886 128.051C39.6032 116.74 38.3773 104.293 40.7659 92.2845C43.1545 80.2761 49.0503 69.2458 57.7079 60.5882C66.3654 51.9307 77.3958 46.0348 89.4041 43.6462C101.412 41.2576 113.859 42.4835 125.171 47.1689C136.483 51.8544 146.151 59.7889 152.953 69.9691C159.755 80.1492 163.386 92.1179 163.386 104.361C163.367 120.774 156.839 136.509 145.234 148.114C133.629 159.72 117.894 166.248 101.481 166.266Z" fill="#12B76A"/>
<path d="M137.907 74.0925L81.5646 129.535L65.111 112.244C64.6748 111.791 64.0769 111.528 63.448 111.514C62.8191 111.501 62.2103 111.736 61.7545 112.17C61.2987 112.603 61.0331 113.2 61.0156 113.829C60.9981 114.457 61.2301 115.068 61.661 115.526L79.7836 134.573C80.0014 134.803 80.2626 134.986 80.552 135.113C80.8414 135.24 81.1533 135.309 81.4693 135.314H81.5098C82.1344 135.314 82.7338 135.068 83.1789 134.629L141.246 77.4866C141.477 77.2695 141.663 77.0082 141.792 76.7182C141.922 76.4281 141.992 76.1152 141.998 75.7977C142.005 75.4803 141.947 75.1647 141.83 74.8697C141.713 74.5746 141.538 74.306 141.315 74.0796C141.092 73.8532 140.827 73.6736 140.534 73.5515C140.241 73.4293 139.926 73.367 139.609 73.3682C139.291 73.3694 138.977 73.4341 138.685 73.5585C138.393 73.6829 138.128 73.8645 137.907 74.0925Z" fill="#667085"/>
<path d="M179.72 175.492H126.792C143.548 169.276 157.585 157.367 166.449 141.848C175.313 126.329 178.44 108.187 175.282 90.5966C172.124 73.0058 162.882 57.085 149.174 45.6183C135.465 34.1516 118.162 27.8689 100.29 27.8689C82.4181 27.8689 65.1148 34.1516 51.4063 45.6183C37.6977 57.085 28.4564 73.0058 25.2985 90.5966C22.1405 108.187 25.2669 126.329 34.1309 141.848C42.9949 157.367 57.0323 169.276 73.7883 175.492H20.8597C20.521 175.448 20.1768 175.476 19.8499 175.576C19.5231 175.675 19.2213 175.843 18.9646 176.069C18.7078 176.294 18.5022 176.571 18.3613 176.883C18.2203 177.194 18.1475 177.532 18.1475 177.873C18.1475 178.215 18.2203 178.552 18.3613 178.864C18.5022 179.175 18.7078 179.452 18.9646 179.678C19.2213 179.903 19.5231 180.071 19.8499 180.17C20.1768 180.27 20.521 180.298 20.8597 180.254H179.72C180.059 180.298 180.403 180.27 180.73 180.17C181.057 180.071 181.359 179.903 181.616 179.678C181.872 179.452 182.078 179.175 182.219 178.864C182.36 178.552 182.433 178.215 182.433 177.873C182.433 177.532 182.36 177.194 182.219 176.883C182.078 176.571 181.872 176.294 181.616 176.069C181.359 175.843 181.057 175.675 180.73 175.576C180.403 175.476 180.059 175.448 179.72 175.492ZM28.8621 104.064C28.8621 89.9363 33.0513 76.1264 40.9 64.38C48.7487 52.6336 59.9043 43.4785 72.9562 38.0722C86.008 32.6659 100.37 31.2514 114.226 34.0075C128.082 36.7636 140.809 43.5665 150.798 53.556C160.788 63.5454 167.591 76.2728 170.347 90.1286C173.103 103.984 171.688 118.346 166.282 131.398C160.876 144.45 151.721 155.606 139.974 163.454C128.228 171.303 114.418 175.492 100.291 175.492C81.3532 175.471 63.1976 167.938 49.8067 154.548C36.4159 141.157 28.8836 123.001 28.8621 104.064ZM105.648 21.6231C106.354 21.6231 107.045 21.4137 107.632 21.0212C108.219 20.6288 108.677 20.071 108.947 19.4184C109.218 18.7658 109.288 18.0477 109.151 17.3549C109.013 16.6621 108.673 16.0258 108.173 15.5263C107.674 15.0268 107.037 14.6867 106.345 14.5489C105.652 14.4111 104.934 14.4818 104.281 14.7521C103.629 15.0224 103.071 15.4802 102.678 16.0675C102.286 16.6548 102.076 17.3453 102.076 18.0517C102.077 18.9986 102.454 19.9065 103.124 20.576C103.793 21.2456 104.701 21.6222 105.648 21.6231ZM105.648 16.266C106.001 16.266 106.346 16.3707 106.64 16.5669C106.934 16.7631 107.162 17.042 107.298 17.3683C107.433 17.6946 107.468 18.0537 107.399 18.4001C107.33 18.7465 107.16 19.0646 106.911 19.3144C106.661 19.5641 106.343 19.7342 105.996 19.8031C105.65 19.872 105.291 19.8366 104.964 19.7015C104.638 19.5663 104.359 19.3374 104.163 19.0438C103.967 18.7501 103.862 18.4049 103.862 18.0517C103.862 17.5782 104.051 17.1242 104.385 16.7893C104.72 16.4545 105.174 16.2663 105.648 16.266ZM188.749 81.4445C188.278 81.4445 187.818 81.5842 187.426 81.8458C187.035 82.1074 186.73 82.4793 186.549 82.9143C186.369 83.3494 186.322 83.8281 186.414 84.29C186.506 84.7519 186.732 85.1761 187.065 85.5091C187.398 85.8421 187.823 86.0688 188.285 86.1607C188.746 86.2526 189.225 86.2054 189.66 86.0252C190.095 85.845 190.467 85.5398 190.729 85.1483C190.99 84.7567 191.13 84.2964 191.13 83.8255C191.129 83.1942 190.878 82.589 190.432 82.1426C189.986 81.6962 189.38 81.4452 188.749 81.4445ZM188.749 85.016C188.514 85.016 188.283 84.9461 188.088 84.8153C187.892 84.6845 187.739 84.4986 187.649 84.2811C187.559 84.0635 187.536 83.8242 187.581 83.5932C187.627 83.3623 187.741 83.1502 187.907 82.9837C188.074 82.8172 188.286 82.7038 188.517 82.6579C188.748 82.612 188.987 82.6355 189.205 82.7256C189.422 82.8157 189.608 82.9683 189.739 83.1641C189.87 83.3599 189.939 83.59 189.939 83.8255C189.939 84.1411 189.814 84.4437 189.59 84.6669C189.367 84.8901 189.065 85.0157 188.749 85.016ZM155.053 4.85645C154.582 4.85645 154.121 4.99609 153.73 5.25771C153.338 5.51933 153.033 5.89118 152.853 6.32625C152.673 6.76131 152.626 7.24004 152.717 7.7019C152.809 8.16376 153.036 8.588 153.369 8.92099C153.702 9.25397 154.126 9.48073 154.588 9.5726C155.05 9.66447 155.529 9.61732 155.964 9.43711C156.399 9.2569 156.771 8.95173 157.032 8.56018C157.294 8.16864 157.434 7.70831 157.434 7.2374C157.433 6.60612 157.182 6.00089 156.736 5.55451C156.289 5.10813 155.684 4.85708 155.053 4.85645ZM155.053 8.42787C154.817 8.42787 154.587 8.35805 154.391 8.22724C154.195 8.09643 154.043 7.9105 153.953 7.69297C153.863 7.47544 153.839 7.23608 153.885 7.00515C153.931 6.77422 154.044 6.5621 154.211 6.3956C154.377 6.22911 154.589 6.11573 154.82 6.0698C155.051 6.02386 155.291 6.04744 155.508 6.13754C155.726 6.22765 155.912 6.38023 156.042 6.576C156.173 6.77178 156.243 7.00194 156.243 7.2374C156.243 7.55303 156.117 7.85565 155.894 8.07884C155.671 8.30203 155.368 8.42756 155.053 8.42787ZM192.354 18.7457C191.883 18.7457 191.423 18.8854 191.031 19.147C190.639 19.4086 190.334 19.7805 190.154 20.2155C189.974 20.6506 189.927 21.1293 190.019 21.5912C190.11 22.053 190.337 22.4773 190.67 22.8103C191.003 23.1433 191.427 23.37 191.889 23.4619C192.351 23.5538 192.83 23.5066 193.265 23.3264C193.7 23.1462 194.072 22.841 194.333 22.4495C194.595 22.0579 194.735 21.5976 194.735 21.1267C194.734 20.4954 194.483 19.8902 194.037 19.4438C193.59 18.9974 192.985 18.7464 192.354 18.7457ZM192.354 22.3172C192.118 22.3172 191.888 22.2473 191.692 22.1165C191.497 21.9857 191.344 21.7998 191.254 21.5823C191.164 21.3647 191.14 21.1254 191.186 20.8944C191.232 20.6635 191.346 20.4514 191.512 20.2849C191.678 20.1184 191.891 20.005 192.122 19.9591C192.352 19.9131 192.592 19.9367 192.809 20.0268C193.027 20.1169 193.213 20.2695 193.344 20.4653C193.474 20.6611 193.544 20.8912 193.544 21.1267C193.544 21.4423 193.418 21.7449 193.195 21.9681C192.972 22.1913 192.669 22.3168 192.354 22.3172ZM36.3681 36.9993C36.3681 36.5284 36.2284 36.0681 35.9668 35.6765C35.7052 35.285 35.3333 34.9798 34.8983 34.7996C34.4632 34.6194 33.9845 34.5722 33.5226 34.6641C33.0608 34.756 32.6365 34.9827 32.3035 35.3157C31.9706 35.6487 31.7438 36.0729 31.6519 36.5348C31.5601 36.9967 31.6072 37.4754 31.7874 37.9105C31.9676 38.3455 32.2728 38.7174 32.6643 38.979C33.0559 39.2406 33.5162 39.3803 33.9871 39.3803C34.6184 39.3796 35.2236 39.1286 35.67 38.6822C36.1164 38.2358 36.3675 37.6306 36.3681 36.9993ZM32.7967 36.9993C32.7967 36.7638 32.8665 36.5337 32.9973 36.3379C33.1281 36.1421 33.314 35.9895 33.5316 35.8994C33.7491 35.8093 33.9884 35.7858 34.2194 35.8317C34.4503 35.8776 34.6624 35.991 34.8289 36.1575C34.9954 36.324 35.1088 36.5361 35.1547 36.7671C35.2007 36.998 35.1771 37.2373 35.087 37.4549C34.9969 37.6724 34.8443 37.8583 34.6485 37.9891C34.4528 38.12 34.2226 38.1898 33.9871 38.1898C33.6715 38.1895 33.3689 38.0639 33.1457 37.8407C32.9225 37.6176 32.797 37.3149 32.7967 36.9993Z" fill="#667085"/>
<path d="M13.2533 81.4578L15.0236 79.1293L13.9057 78.4959L12.7688 81.1031H12.7319L11.5771 78.515L10.4402 79.1662L12.1914 81.44V81.4769L9.45215 81.1221V82.3888L12.2093 82.0352V82.0721L10.4402 84.3447L11.501 85.0162L12.7129 82.3888H12.7498L13.8676 84.9971L15.0414 84.3269L13.2533 82.0912V82.0531L16.0652 82.3888V81.1221L13.2533 81.4948V81.4578ZM14.77 8.02094L13.751 9.32927L14.3617 9.71617L15.0593 8.20308H15.0807L15.7248 9.70546L16.401 9.31855L15.3712 8.03165V8.01022L16.9902 8.20308V7.47332L15.3712 7.68879V7.66736L16.3902 6.3257L15.7462 5.96141L15.0926 7.4626H15.07L14.4057 5.97213L13.751 6.34713L14.7593 7.65665V7.67808L13.1819 7.47332V8.20308L14.77 7.99951V8.02094ZM78.0355 8.0876V6.84475L75.2771 7.21022V7.17332L77.0129 4.88998L75.9164 4.26855L74.8021 6.82689H74.7652L73.6331 4.28641L72.5176 4.92689L74.2355 7.15546V7.19236L71.5486 6.84475V8.0876L74.2533 7.73998V7.77689L72.5176 10.0055L73.5593 10.6638L74.7474 8.0876H74.7831L75.8795 10.6447L77.0307 9.9876L75.2771 7.79474V7.75784L78.0355 8.0876ZM165.599 43.2602L167.096 41.29L166.15 40.7543L165.189 42.9602H165.157L164.181 40.7697L163.218 41.3209L164.7 43.2447V43.2757L162.383 42.9757V44.0471L164.715 43.7483V43.7805L163.218 45.7019L164.116 46.2697L165.141 44.0471H165.172L166.118 46.2543L167.112 45.6864L165.599 43.7959V43.7638L167.977 44.0471V42.9757L165.599 43.2912V43.2602Z" fill="#12B76A"/>
<path d="M2.67197 180.254C3.98693 180.254 5.05292 179.188 5.05292 177.873C5.05292 176.558 3.98693 175.492 2.67197 175.492C1.357 175.492 0.291016 176.558 0.291016 177.873C0.291016 179.188 1.357 180.254 2.67197 180.254Z" fill="#667085"/>
<path d="M13.386 175.492H9.81455C9.18308 175.492 8.57747 175.743 8.13096 176.19C7.68444 176.636 7.43359 177.242 7.43359 177.873C7.43359 178.505 7.68444 179.11 8.13096 179.557C8.57747 180.003 9.18308 180.254 9.81455 180.254H13.386C14.0174 180.254 14.623 180.003 15.0696 179.557C15.5161 179.11 15.7669 178.505 15.7669 177.873C15.7669 177.242 15.5161 176.636 15.0696 176.19C14.623 175.743 14.0174 175.492 13.386 175.492ZM190.767 175.492H187.195C186.564 175.492 185.958 175.743 185.512 176.19C185.065 176.636 184.815 177.242 184.815 177.873C184.815 178.505 185.065 179.11 185.512 179.557C185.958 180.003 186.564 180.254 187.195 180.254H190.767C191.398 180.254 192.004 180.003 192.451 179.557C192.897 179.11 193.148 178.505 193.148 177.873C193.148 177.242 192.897 176.636 192.451 176.19C192.004 175.743 191.398 175.492 190.767 175.492Z" fill="#667085"/>
<path d="M197.91 180.254C199.225 180.254 200.291 179.188 200.291 177.873C200.291 176.558 199.225 175.492 197.91 175.492C196.595 175.492 195.529 176.558 195.529 177.873C195.529 179.188 196.595 180.254 197.91 180.254Z" fill="#667085"/>
<path d="M140.95 185.016H131.06C130.46 185.063 129.9 185.334 129.492 185.775C129.083 186.216 128.856 186.796 128.856 187.397C128.856 187.998 129.083 188.578 129.492 189.019C129.9 189.461 130.46 189.732 131.06 189.778H140.95C141.55 189.732 142.11 189.461 142.518 189.019C142.927 188.578 143.154 187.998 143.154 187.397C143.154 186.796 142.927 186.216 142.518 185.775C142.11 185.334 141.55 185.063 140.95 185.016ZM69.5217 185.016H59.6313C59.0316 185.063 58.4716 185.334 58.0631 185.775C57.6547 186.216 57.4277 186.796 57.4277 187.397C57.4277 187.998 57.6547 188.578 58.0631 189.019C58.4716 189.461 59.0316 189.732 59.6313 189.778H69.5217C70.1214 189.732 70.6814 189.461 71.0899 189.019C71.4983 188.578 71.7253 187.998 71.7253 187.397C71.7253 186.796 71.4983 186.216 71.0899 185.775C70.6814 185.334 70.1214 185.063 69.5217 185.016ZM124.1 185.016H76.4813C75.8498 185.016 75.2442 185.267 74.7977 185.713C74.3512 186.16 74.1003 186.766 74.1003 187.397C74.1003 188.029 74.3512 188.634 74.7977 189.081C75.2442 189.527 75.8498 189.778 76.4813 189.778H95.4575V192.159H86.0051C85.3736 192.159 84.768 192.41 84.3215 192.856C83.875 193.303 83.6241 193.908 83.6241 194.54C83.6241 195.171 83.875 195.777 84.3215 196.224C84.768 196.67 85.3736 196.921 86.0051 196.921H115.767C116.398 196.921 117.004 196.67 117.451 196.224C117.897 195.777 118.148 195.171 118.148 194.54C118.148 193.908 117.897 193.303 117.451 192.856C117.004 192.41 116.398 192.159 115.767 192.159H105.124V189.778H124.1C124.732 189.778 125.337 189.527 125.784 189.081C126.23 188.634 126.481 188.029 126.481 187.397C126.481 186.766 126.23 186.16 125.784 185.713C125.337 185.267 124.732 185.016 124.1 185.016Z" fill="#12B76A"/>
</g>
<defs>
<clipPath id="clip0_2596_11221">
<rect width="200" height="200" fill="white" transform="translate(0.291016 0.594727)"/>
</clipPath>
</defs>
</svg>
          <h1 className=" text text-5xl md:pl-12 font -bold text-transparent bg-clip-text bg-gradient-to-br from-indigo-500 to-fuchsia-500 mb-4 bt"> <span>Payment Confirmed </span></h1>
          
          <h1 className="you"> Total of {amount?.toString()} Has been recieved Thank you for using <p className="nob">Solana</p></h1>
         
         
        </div> }

        <div>
          
          {isQRVisible ? null : (
            <div className="input">
 <input
  type="number"
  id="amount"
  value={amount?.toString()} // Convert BigNumber to string
  onChange={(e) => {
    const newValue = e.target.value;
    setAmountToString(newValue); // Update the temporary variable
    const parsedAmount = new BigNumber(newValue);
    setAmount(parsedAmount); // Update the BigNumber state
  }}
/>
<p className="sol">SOL</p>
<div className="usd"> <p>1</p> USD = <p> {truncate(usdToSolanaRate, 4)}</p> SOL </div>
</div>
          )}
          <div className="btn">
          { isQRVisible? null  : <button
            style={{ cursor: "pointer", padding: "10px", marginRight: "10px" }}
            onClick={handleShowQRClick}
            className="img"
          >
            Generate Solana Pay Order
          </button>}
          </div>
          
          {/* { qrCode && 
          
          <div>{reference && (
            <button
              style={{ cursor: "pointer", padding: "10px" }}
              onClick={handleVerifyClick}
              className="img"
            >
              Verify Transaction
            </button>
          )}</div>} */}
        </div>
        {isQRVisible && (
          <div className="via">
            {" "}
            Share via{" "}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="12"
              height="15"
              viewBox="0 0 12 15"
              fill="none"
              className="svg"
            >
              <path
                d="M10 14.1668C9.44444 14.1668 8.97222 13.9724 8.58333 13.5835C8.19444 13.1946 8 12.7224 8 12.1668C8 12.0891 8.00556 12.0084 8.01667 11.9248C8.02778 11.8413 8.04445 11.7664 8.06667 11.7002L3.36667 8.96683C3.17778 9.1335 2.96667 9.26416 2.73333 9.35883C2.5 9.4535 2.25556 9.50061 2 9.50016C1.44444 9.50016 0.972222 9.30572 0.583333 8.91683C0.194444 8.52794 0 8.05572 0 7.50016C0 6.94461 0.194444 6.47238 0.583333 6.0835C0.972222 5.69461 1.44444 5.50016 2 5.50016C2.25556 5.50016 2.5 5.5475 2.73333 5.64216C2.96667 5.73683 3.17778 5.86727 3.36667 6.0335L8.06667 3.30016C8.04445 3.2335 8.02778 3.15861 8.01667 3.0755C8.00556 2.99238 8 2.91172 8 2.8335C8 2.27794 8.19444 1.80572 8.58333 1.41683C8.97222 1.02794 9.44444 0.833496 10 0.833496C10.5556 0.833496 11.0278 1.02794 11.4167 1.41683C11.8056 1.80572 12 2.27794 12 2.8335C12 3.38905 11.8056 3.86127 11.4167 4.25016C11.0278 4.63905 10.5556 4.8335 10 4.8335C9.74444 4.8335 9.5 4.78638 9.26667 4.69216C9.03333 4.59794 8.82222 4.46727 8.63333 4.30016L3.93333 7.0335C3.95556 7.10016 3.97222 7.17527 3.98333 7.25883C3.99444 7.34238 4 7.42283 4 7.50016C4 7.57794 3.99444 7.65861 3.98333 7.74216C3.97222 7.82572 3.95556 7.90061 3.93333 7.96683L8.63333 10.7002C8.82222 10.5335 9.03333 10.4031 9.26667 10.3088C9.5 10.2146 9.74444 10.1673 10 10.1668C10.5556 10.1668 11.0278 10.3613 11.4167 10.7502C11.8056 11.1391 12 11.6113 12 12.1668C12 12.7224 11.8056 13.1946 11.4167 13.5835C11.0278 13.9724 10.5556 14.1668 10 14.1668Z"
                fill="#1D2939"
              />
            </svg>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 20 20"
              fill="none"
              className="svg"
              onClick={handleShareToWhatsApp}
            >
              <path
                d="M18.3172 9.50829C18.0339 4.67496 13.6422 0.949968 8.5839 1.7833C5.10056 2.3583 2.3089 5.18328 1.76724 8.66662C1.45057 10.6833 1.86725 12.5916 2.77559 14.1666L2.03391 16.925C1.86724 17.55 2.44223 18.1166 3.05889 17.9416L5.77557 17.1916C7.0089 17.9166 8.45057 18.3333 9.99223 18.3333C14.6922 18.3333 18.5922 14.1916 18.3172 9.50829ZM14.0672 13.1C13.9922 13.25 13.9006 13.3916 13.7839 13.525C13.5756 13.75 13.3505 13.9166 13.1005 14.0166C12.8505 14.125 12.5756 14.175 12.2839 14.175C11.8589 14.175 11.4006 14.075 10.9256 13.8666C10.4422 13.6583 9.96725 13.3833 9.49225 13.0416C9.00892 12.6916 8.55891 12.3 8.12557 11.875C7.69224 11.4416 7.30889 10.9833 6.95889 10.5083C6.61722 10.0333 6.34224 9.55828 6.14224 9.08328C5.94224 8.60828 5.84225 8.14996 5.84225 7.71663C5.84225 7.4333 5.89224 7.1583 5.99224 6.9083C6.09224 6.64996 6.25059 6.41663 6.47559 6.2083C6.74226 5.94163 7.0339 5.81663 7.34224 5.81663C7.4589 5.81663 7.57555 5.84163 7.68388 5.89163C7.79222 5.94163 7.89224 6.01663 7.96724 6.12496L8.93388 7.49161C9.00888 7.59995 9.06723 7.69162 9.10056 7.78329C9.14223 7.87495 9.1589 7.95828 9.1589 8.04162C9.1589 8.14162 9.12558 8.24163 9.06724 8.34163C9.00891 8.44163 8.93389 8.54162 8.83389 8.64162L8.51722 8.97495C8.46722 9.02495 8.45059 9.07496 8.45059 9.14162C8.45059 9.17496 8.45888 9.20829 8.46722 9.24162C8.48388 9.27495 8.49225 9.29996 8.50058 9.32496C8.57558 9.46662 8.70889 9.64161 8.89223 9.85828C9.08389 10.0749 9.28393 10.3 9.50059 10.5166C9.72559 10.7416 9.94225 10.9416 10.1672 11.1333C10.3839 11.3166 10.5672 11.4416 10.7089 11.5166C10.7339 11.525 10.7589 11.5416 10.7839 11.5499C10.8172 11.5666 10.8506 11.5666 10.8922 11.5666C10.9672 11.5666 11.0173 11.5416 11.0673 11.4916L11.3839 11.175C11.4922 11.0666 11.5923 10.9916 11.6839 10.9416C11.7839 10.8833 11.8756 10.8499 11.9839 10.8499C12.0672 10.8499 12.1506 10.8666 12.2422 10.9083C12.3339 10.95 12.4339 11 12.5339 11.075L13.9172 12.0583C14.0256 12.1333 14.1006 12.225 14.1506 12.325C14.1922 12.4333 14.2172 12.5333 14.2172 12.65C14.1672 12.7916 14.1339 12.95 14.0672 13.1Z"
                fill="#25D366"
              />
            </svg>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 20 20"
              fill="none"
              className="svg"
              onClick={handleShareViaEmail}
            >
              <path
                d="M14.166 17.0834H5.83268C3.33268 17.0834 1.66602 15.8334 1.66602 12.9167V7.08341C1.66602 4.16675 3.33268 2.91675 5.83268 2.91675H14.166C16.666 2.91675 18.3327 4.16675 18.3327 7.08341V12.9167C18.3327 15.8334 16.666 17.0834 14.166 17.0834Z"
                stroke="#475467"
                strokeWidth="1.5"
                strokeMiterlimit="10"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M14.1673 7.5L11.559 9.58333C10.7006 10.2667 9.29231 10.2667 8.43398 9.58333L5.83398 7.5"
                stroke="#475467"
                strokeWidth="1.5"
                strokeMiterlimit="10"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </div>
        )}
      </main>
      {verificationStatus && <p className="trans">{verificationStatus}</p>}
      {error && <p className="err">{error}</p>}
      <div className="relative mb-40 mt-40 flex items-center justify-center text-black">
       
       
        <Image
          src="/logo.png" // Path to the image in the public directory
          alt="My Image"
          width="150"
          height="0"
          className="image"
        />
         <Image
          src="/phan.png" // Path to the image in the public directory
          alt="My Image"
          width="100"
          height="0"
          className="image"
        />
        
          
    
        
      </div>
    
    </>
  );
  }